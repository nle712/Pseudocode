What is a hash table?

A: A hash table is a data structure that has a value that is linked by a key.
They make a key-value pair, which is like a JavaScript object. The keys are all unique; since they are unique, the values can be found by looking up the key. Hash tables store all of this information.

What is hashing?

A: Hashing  is the process of converting data into a hash code using a hashing function.

How does a hash table store data?

A:A hash table store data by converting the key into a hash code and storing it in an array index.

How are hash tables and objects different?

A:Hash tables are used as a collection of similar data, while objects can hold different types of data put together.

Determine whether you would use a hash table or an object to store each of the following pieces of data:
A list of pets and their unique names.- Hash table
The name, age, and the birthday of your best friend. - Object
The name and location of every company in a given city. - Hash Table
All of the books checked out from a library by a particular individual. - Hash table
The primary and secondary phone numbers for a contact. - Object

Build a system that allows a sales associate to enter a customer's name, address, and phone number into the system and look up customers using their phone numbers. Store this information in a hash table.

/* Build a system that allows a sales associate to enter a customer's name, address, and phone number into the system and look up customers using their phone numbers. Store this information in a hash table. */


let hash = (string, max) => {
  let hash = 0;
  for (let i = 0; i < string.length; i++) {
    hash += string.charCodeAt(i);
  }
  return hash % max;
};

let HashTable = function() {
  let storage = []
  let storageLimit = 100;

  this.add = function(key,value) {
    let index = hash(key, storageLimit);
    if (storage[index] === undefined) {
      storage[index] = [
        [key,value]
      ];
    } else {
      var inserted = false;
        for (let i = 0; i < storage[index].length; i++) {
          if (storage[index][i][0] === key) {
            storage[index][i][1] = value;
            inserted = true;
          }
        }
        if (inserted === false) {
          storage[index].push([key,value]);
        }
    }
  };

  this.lookup = function(key) {
    let index = hash(key, storageLimit);
    if (storage[index] === undefined) {
      return undefined;
    } else {
      for (let i = 0; i < storage[index].length; i++) {
        if (storage[index][i][0] === key) {
          return storage[index][i][1];
        }
      }
    }
  };
};


var ht = new HashTable();
ht.add(99999,{name:'Vincent', address:' 55 Pine St'})
ht.add(1000,{name:'Joseph',address:'48 Brooklyn Ave.'});
ht.add(5000,{name:'Kenneth',address:'123 Sesame St.'});

console.log(ht.lookup(99999));
console.log(ht.lookup(5000));
console.log(ht.lookup(1000));




Build a system that allows a store owner to track their store's inventory using a hash table for storage.

var hash = (string,max) =>{
  var hash= 0
  for(var i=0; i<string.length;i++){
    hash += string.charCodeAt(i)
  }
  return hash % max;
};

let HashTable = function(){
 let storage = [];
 const storageLimit= 5;


 this.add = function(key, value) {
    var index = hash(key, storageLimit);
    if (storage[index] === undefined) {
      storage[index] = [
        [key, value]
      ];
    } else {
      var inserted = false;
      for (var i = 0; i < storage[index].length; i++) {
        if (storage[index][i][0] === key) {
          storage[index][i][1] = value;
          inserted = true;
        }
      }
      if (inserted === false) {
        storage[index].push([key, value]);
      }
    }
  };

  this.search = function(key) {
    var index = hash(key, storageLimit);
    if (storage[index] === undefined) {
      return undefined;
    } else {
      for (var i = 0; i < storage[index].length; i++) {
        if (storage[index][i][0] === key) {
          return storage[index][i][1];
        }
      }
    }
  };

};

var ht = new HashTable();
ht.add('Vodka',4000);
ht.add('Rum',5030);
ht.add('Whiskey', 5300);
ht.add('Wine',2410);

ht.search('Wine');

Build a system that allows digital copies of newspapers to be entered and searched by publisher and publication date. Use hash tables to store the necessary data.



let hash = (string, max)=> {
  let hash = 0;
  for(let i=0; i< string.length;i++) {
    hash+= string.charCodeAt(i);
  }
  return hash % max;
};

class Newspaper {
  constructor() {
    this.storage = [];
    this.storageLimit = 60;


    this.add = function(publisher, pubDate) {
      let key = publisher + pubDate;
      let index = hash(key, this.storageLimit);
      let data = [publisher, pubDate];
        if (this.storage[index] === undefined) {
          this.storage[index] = [ ];
      }this.storage[index].push(data);
    }

    this.search = function(publisher, pubDate) {
      let key = publisher + pubDate;
      let index = hash(key, this.storageLimit);
      let result = [];

      if (!this.storage[index]) {
        return 'No results were found for this search'
      }
        this.storage[index].forEach(entry => {
        if (entry[0] === publisher && entry[1] === pubDate) {
          result.push(entry);
        }
      })
      return result;
    }
  }
}


let news = new Newspaper();
news.add('Skyhorse', '2019');
news.add('Penguin', '1995');
news.add('Springer','2007');

console.log(news.search('Skyhorse', '2019'));
