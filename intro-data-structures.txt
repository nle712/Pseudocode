1. A line of people at an amusement park ride.

The line is composed of members, represented as strings.
There is a front to the line, as well as a back.
When someone enters the line, place them at the end.
People may leave the line whenever they see fit, and those behind them take their place.
Given the above real-world information, use an array data structure to code the following solution.

a) Use an array input: ["Vivian", "Ava", "Josh", "Patrick", "Mike"]
b) Insert a new person, "Mary" at the end of the line. In other words, you should insert Mary after Mike.
c) Find a person in line named "Josh." This function should return the position of 2 in the array, (recall that arrays are 0-based).
d) Find a person in line named "Emily." What should your function return if it does not find the item in the array?
e) What if Ava wants to allow a friend, "Melissa", to cut in line in front of her? How would you code this so Melissa appears before Ava?
f) If Patrick wants to leave the line, how would you delete him from the array?



/*A line of people at an amusement park ride.

The line is composed of members, represented as strings.
There is a front to the line, as well as a back.
When someone enters the line, place them at the end.
People may leave the line whenever they see fit, and those behind them take their place.
Given the above real-world information, use an array data structure to code the following solution.

a) Use an array input: ["Vivian", "Ava", "Josh", "Patrick", "Mike"]
b) Insert a new person, "Mary" at the end of the line. In other words, you should insert Mary after Mike.
c) Find a person in line named "Josh." This function should return the position of 2 in the array, (recall that arrays are 0-based).
d) Find a person in line named "Emily." What should your function return if it does not find the item in the array?
e) What if Ava wants to allow a friend, "Melissa", to cut in line in front of her? How would you code this so Melissa appears before Ava?
f) If Patrick wants to leave the line, how would you delete him from the array? */


class AmusementPark {
  constructor(line) {
    this.line = line || [];
  }

  insert(name, index) {
    if(index) {
      this.line.splice(index, 0, name);
    } else {
      this.line.push(name);
    }
  }

  find(name) {
    if(name){
     this.line.indexOf(name);
    } else {
      console.log("there is noone here with that name");
    }
  }

  remove(name, index) {
    return this.line.splice(index, 1, name);
  }



  let visitors = ["Vivian", "Ava", "Josh", "Patrick", "Mike"];

  const funPark = new AmusementPark(visitors);

  funPark.insert("Mary");
  funPark.insert("Melissa", 1);
  //funPark.remove(4,4)
  console.log(funPark.find("Josh"));
  console.log(funPark.find("Emily"))
  console.log(funPark)



  // console.log(amusementPark.push("Mary"));
  // for(let i = 0; i < arr.length; i++) {
  //   if(arr[i] === "Josh") {
  //     console.log(i);
  //   }
  //   else if(arr[i] === "Emily") {
  //     console.log(i);
  //   }
  // }
  // else {
  //   console.log("There is no one named Emily in the line");
  // }

2. Provide another real-world example that you can model using a data structure.

Another real-world example that I can use data structure for is the possible moves in the game of chess.


3. How would your data structure allow developers to access and manipulate the data?

The data structure would map out all of the possible next moves and what can branch off from that move.
Say by moving the pawn 1 space forward and the opponent then sees that the rook is now open they will move their chess piece to take the rook, but
if they do that move what then happens to their chess piece. It will allow developers to see all of the steps that can then occur.
They are able to access the data and can manipulate a move by instead of doing one move forward on the chess board they might move to the left or right.
They are able to manipulate the data and change it as necessary.
