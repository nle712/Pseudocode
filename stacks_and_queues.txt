1.    What is the main difference between a stack and a queue?

Stacks are LIFO while queue is FIFO. Stack uses push and pop. Queue uses enqueuer to insert and dequeuer to remove data.

2.    What are the similarities between stacks and queues?

They are similar because they both alter a list. They alter it differently though. They are both data structures in which elements are stored and retrieved.

3.    Imagine you are an engineer tasked with implementing the UNDO and REDO options in a word processor such as Microsoft Word. Which data structure would you use for each option and why?

For undo and redo I would use a stack. I am wanting to undo the last thing typed or redo the last thing typed. I am not wanting to edit things that are in the beginning of the text that I wrote. I am editing the last word written. This is because you look at what you are typing currently. It would be a push or pop method. I would push in the redo or a word or pop out a word by undoing.

Programming Questions

You may program the following question in any language of your choice. Before you begin coding, write out a plan as to how you will solve the question.

Given a string, reverse it using a stack. For example, the string "Bloc!"should be converted to "!colB".
Implement the pop method of a stack using one queue. Make a FIFO data structure mirror the functionality of a LIFO data structure. Since the internal list is not the same as defined in the checkpoint, it may help to rewrite the pseudocode first.
To delete an item, take all of the elements in the queue one at a time and put them at the end of the queue, except for the last one which should be removed and returned.


/* FUNCTION REVERSE(original)
  INIT a new stack
  FOR each character in original
    CALL stack.push WITH character
  END FOR
  INIT reversed to empty string
  WHILE stack is not empty
    CALL stack.pop RETURNING character
    APPEND character to reversed
  END WHILE
  RETURN reversed
END FUNCTION */

function reverse(str){
  let stack = [];
  for(let i=0; i<str.length; i++){
    stack.push(str[i])
  }
  let reverseStr = "";
  while(stack.length > 0){
   reverseStr += stack.pop();
  }
  return reverseStr
}

console.log(reverse('Bloc!'));


Implement the enqueue and dequeue methods defined in the checkpoint inside your own Queue class.

class Queue {
   constructor(){
     this.elements = []
   }

 // enqueue function

  enqueue(element)
{
    this.elements.push(element);
}

  // dequeue function

  dequeue()
{
    if(this.isEmpty())
        return "Empty";
    return this.elements.shift();
}

isEmpty()
{
    return this.elements.length ==0;
}

}

var queue = new Queue();

queue.enqueue(10)
queue.enqueue(10)

console.log(queue)
queue.dequeue()
console.log(queue)
